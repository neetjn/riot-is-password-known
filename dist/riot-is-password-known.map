{"version":3,"sources":["constants.js","mixin.js","tag.js","plugin.js"],"names":["Constants","apiUri","sliceSize","minPasswordLength","Mixin","password","hashed","prefix","toString","slice","suffix","toUpperCase","Promise","resolve","reject","fetch","then","response","text","list","result","split","find","p","found","count","parseInt","replace","catch","Tag","opts","self","root","HTMLInputElement","type","addEventListener","value","length","passwordKnown","parent","trigger","PasswordKnown","instance","mixin","tag","module","exports"],"mappings":";AAAO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAAA,MAAMA,EAAY,CACvBC,OAAQ,uCACRC,UAAW,EACXC,kBAAmB,GAHd,QAAA,UAAA;;ACwBN,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,MAAA,EAxBD,IAAA,EAAA,EAAA,QAAA,YACA,EAAA,QAAA,eAuBC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GArBM,SAASC,EAAMC,GACdC,MAAAA,GAAS,EAAKD,EAAAA,SAAAA,GACdE,EAASD,EAAOE,WAAWC,MAAM,EAAGT,EAAUE,UAAAA,WAC9CQ,EAASJ,EAAOG,MAAMT,EAAUE,UAAAA,WAAWS,cAC1C,OAAA,IAAIC,QAAQ,SAASC,EAASC,GACnCC,SAASf,EAAUC,UAAAA,UAAUM,KAC1BS,KAAKC,IACJA,EAASC,OAAOF,KAAKG,IACbC,MAAAA,EAASD,EAAKE,MAAM,MAAMC,KAAKC,GAAKA,EAAEF,MAAM,KAAK,IAAMX,GAC7DG,EAAQ,CACNW,QAAOJ,EACPK,MAAOL,EACHM,SAASN,EAAOC,MAAM,KAAK,GAAGM,QAAQ,MAAO,KAC7C,QAITC,MAAM,KACLd;;ACEP,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,IAAA,EAvBD,IAAA,EAAA,QAAA,eAEO,SAASe,EAAIC,GACZC,MAAAA,EAAO,KAGXA,EAAKC,gBAAgBC,mBACP,QAAbH,EAAKI,MAA+B,YAAbJ,EAAKI,OAE7BH,EAAKC,KAAKG,iBAAiB,QAAS,WAC5BC,MAAAA,EAAQL,EAAKC,KAAKI,MAAMT,QAAQ,MAAO,IACzCS,EAAMC,OAASrC,EAAUG,UAAAA,mBAC3B4B,EACGO,cAAcF,GACdpB,KAAKI,IACJW,EAAKQ,OAAOC,QAAQ,gBAAiBpB,KAEtCQ,MAAM,KACLG,EAAKQ,OAAOC,QAAQ,iBAAiB;;ACVjD,aARA,IAAA,EAAA,QAAA,WACA,EAAA,QAAA,SAEA,SAASC,EAAcC,GACrBA,EAASC,MAAM,CAAEL,cAAelC,EAAAA,QAChCsC,EAASE,IAAI,kBAAkB,GAAO,GAAO,EAAOf,EAApD,KAGFgB,OAAOC,QAAUL","file":"riot-is-password-known.map","sourceRoot":"../src","sourcesContent":["export const Constants = {\n  apiUri: 'https://api.pwnedpasswords.com/range',\n  sliceSize: 5,\n  minPasswordLength: 5\n}\n","import sha1 from 'js-sha1'\nimport { Constants } from './constants'\n\nexport function Mixin(password) {\n  const hashed = sha1(password)\n  const prefix = hashed.toString().slice(0, Constants.sliceSize)\n  const suffix = hashed.slice(Constants.sliceSize).toUpperCase()\n  return new Promise(function(resolve, reject) {\n    fetch(`${Constants.apiUri}/${prefix}`)\n      .then(response => {\n        response.text().then(list => {\n          const result = list.split('\\n').find(p => p.split(':')[0] == suffix)\n          resolve({\n            found: result ? true : false,\n            count: result\n              ? parseInt(result.split(':')[1].replace('\\\\r', ''))\n              : 0\n          })\n        })\n      })\n      .catch(() => {\n        reject()\n      })\n  })\n}\n","import { Constants } from './constants'\n\nexport function Tag(opts) {\n  const self = this\n\n  if (\n    self.root instanceof HTMLInputElement &&\n    (opts.type == 'text' || opts.type == 'password')\n  ) {\n    self.root.addEventListener('keyup', function() {\n      const value = self.root.value.replace(/\\s/g, '')\n      if (value.length > Constants.minPasswordLength) {\n        self\n          .passwordKnown(value)\n          .then(result => {\n            self.parent.trigger('passwordKnown', result)\n          })\n          .catch(() => {\n            self.parent.trigger('passwordKnown', false)\n          })\n      }\n    })\n  }\n}\n","import { Mixin } from './mixin'\nimport { Tag } from './tag'\n\nfunction PasswordKnown(instance) {\n  instance.mixin({ passwordKnown: Mixin })\n  instance.tag('password-known', false, false, false, Tag)\n}\n\nmodule.exports = PasswordKnown\n"]}