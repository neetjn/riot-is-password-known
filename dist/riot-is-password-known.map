{"version":3,"sources":["constants.js","mixin.js","tag.js","plugin.js"],"names":["Constants","apiUri","sliceSize","minPasswordLength","Mixin","password","hashed","prefix","slice","slizeSize","suffix","Promise","resolve","reject","fetch","then","response","text","list","split","find","p","catch","Tag","opts","self","root","HTMLInputElement","type","addEventListener","value","replace","length","passwordKnown","matched","parent","trigger","PasswordKnown","instance","mixin","tag"],"mappings":";AAAO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAAA,MAAMA,EAAY,CACvBC,OAAQ,uCACRC,UAAW,EACXC,kBAAmB,GAHd,QAAA,UAAA;;ACoBN,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,MAAA,EApBD,IAAA,EAAA,EAAA,QAAA,YACA,EAAA,QAAA,eAmBC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAjBM,SAASC,EAAMC,GACdC,MAAAA,GAAS,EAAKD,EAAAA,SAAAA,GACdE,EAASD,EAAOE,MAAM,EAAGR,EAAUS,UAAAA,WACnCC,EAASJ,EAAOE,MAAMR,EAAUE,UAAAA,WAC/B,OAAA,IAAIS,QAAQ,SAASC,EAASC,GACnCC,SAASd,EAAUC,UAAAA,UAAUM,KAC1BQ,KAAKC,IACJA,EAASC,OAAOF,KAAKG,IACnBN,IACEM,EAAKC,MAAM,MAAMC,KAAKC,GAAKA,EAAEF,MAAM,KAAK,IAAMT,QAInDY,MAAM,KACLT;;ACMP,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,IAAA,EAvBD,IAAA,EAAA,QAAA,eAEO,SAASU,EAAIC,GACZC,MAAAA,EAAO,KAGXA,EAAKC,gBAAgBC,mBACP,QAAbH,EAAKI,MAA+B,YAAbJ,EAAKI,OAE7BH,EAAKC,KAAKG,iBAAiB,QAAS,WAC5BC,MAAAA,EAAQL,EAAKC,KAAKI,MAAMC,QAAQ,MAAO,IACzCD,EAAME,OAAShC,EAAUG,UAAAA,mBAC3BsB,EACGQ,cAAcH,GACdf,KAAKmB,IACJT,EAAKU,OAAOC,QAAQ,gBAAiBF,KAEtCZ,MAAM,KACLG,EAAKU,OAAOC,QAAQ,iBAAiB;;ACZhD,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAND,IAAA,EAAA,QAAA,WACA,EAAA,QAAA,SAEe,SAASC,EAAcC,GACpCA,EAASC,MAAM,CAAEN,cAAe7B,EAAAA,QAChCkC,EAASE,IAAI,kBAAkB,GAAO,GAAO,EAAOjB,EAApD","file":"riot-is-password-known.map","sourceRoot":"../src","sourcesContent":["export const Constants = {\n  apiUri: 'https://api.pwnedpasswords.com/range',\n  sliceSize: 5,\n  minPasswordLength: 5\n}\n","import sha1 from 'js-sha1'\nimport { Constants } from './constants'\n\nexport function Mixin(password) {\n  const hashed = sha1(password)\n  const prefix = hashed.slice(0, Constants.slizeSize)\n  const suffix = hashed.slice(Constants.sliceSize)\n  return new Promise(function(resolve, reject) {\n    fetch(`${Constants.apiUri}/${prefix}`)\n      .then(response => {\n        response.text().then(list => {\n          resolve(\n            list.split('\\n').find(p => p.split(':')[0] == suffix) ? true : false\n          )\n        })\n      })\n      .catch(() => {\n        reject()\n      })\n  })\n}\n","import { Constants } from './constants'\n\nexport function Tag(opts) {\n  const self = this\n\n  if (\n    self.root instanceof HTMLInputElement &&\n    (opts.type == 'text' || opts.type == 'password')\n  ) {\n    self.root.addEventListener('keyup', function() {\n      const value = self.root.value.replace(/\\s/g, '')\n      if (value.length > Constants.minPasswordLength) {\n        self\n          .passwordKnown(value)\n          .then(matched => {\n            self.parent.trigger('passwordKnown', matched)\n          })\n          .catch(() => {\n            self.parent.trigger('passwordKnown', false)\n          })\n      }\n    })\n  }\n}\n","import { Mixin } from './mixin'\nimport { Tag } from './tag'\n\nexport default function PasswordKnown(instance) {\n  instance.mixin({ passwordKnown: Mixin })\n  instance.tag('password-known', false, false, false, Tag)\n}\n"]}