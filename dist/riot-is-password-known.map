{"version":3,"sources":["constants.js","mixin.js","tag.js","plugin.js"],"names":["Constants","apiUri","sliceSize","minPasswordLength","Mixin","password","hashed","prefix","toString","slice","suffix","toUpperCase","Promise","resolve","reject","fetch","then","response","text","list","console","log","split","find","p","result","matched","count","parseInt","replace","catch","Tag","opts","self","root","HTMLInputElement","type","addEventListener","value","length","passwordKnown","parent","trigger","PasswordKnown","instance","mixin","tag","module","exports"],"mappings":";AAAO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAAA,MAAMA,EAAY,CACvBC,OAAQ,uCACRC,UAAW,EACXC,kBAAmB,GAHd,QAAA,UAAA;;ACgCN,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,MAAA,EAhCD,IAAA,EAAA,EAAA,QAAA,YACA,EAAA,QAAA,eA+BC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA7BM,SAASC,EAAMC,GACdC,MAAAA,GAAS,EAAKD,EAAAA,SAAAA,GACdE,EAASD,EAAOE,WAAWC,MAAM,EAAGT,EAAUE,UAAAA,WAC9CQ,EAASJ,EAAOG,MAAMT,EAAUE,UAAAA,WAAWS,cAC1C,OAAA,IAAIC,QAAQ,SAASC,EAASC,GACnCC,SAASf,EAAUC,UAAAA,UAAUM,KAC1BS,KAAKC,IACJA,EAASC,OAAOF,KAAKG,IAEnBC,QAAQC,IAAIF,EAAKG,MAAM,OAEvBF,QAAQC,IAAIF,EAAKG,MAAM,MAAMC,KAAKC,GAAKA,EAAEF,MAAM,KAAK,IAAMZ,IAE1DU,QAAQC,OAAOf,OAAYI,KACrBe,MAAAA,EAASN,EAAKG,MAAM,MAAMC,KAAKC,GAAKA,EAAEF,MAAM,KAAK,IAAMZ,GAE7DU,QAAQC,IAAII,GACZZ,EAAQ,CACNa,UAASD,EACTE,MAAOF,EACHG,SAASH,EAAOH,MAAM,KAAK,GAAGO,QAAQ,MAAO,KAC7C,QAITC,MAAM,KACLhB;;ACNP,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,IAAA,EAvBD,IAAA,EAAA,QAAA,eAEO,SAASiB,EAAIC,GACZC,MAAAA,EAAO,KAGXA,EAAKC,gBAAgBC,mBACP,QAAbH,EAAKI,MAA+B,YAAbJ,EAAKI,OAE7BH,EAAKC,KAAKG,iBAAiB,QAAS,WAC5BC,MAAAA,EAAQL,EAAKC,KAAKI,MAAMT,QAAQ,MAAO,IACzCS,EAAMC,OAASvC,EAAUG,UAAAA,mBAC3B8B,EACGO,cAAcF,GACdtB,KAAKU,IACJO,EAAKQ,OAAOC,QAAQ,gBAAiBhB,KAEtCI,MAAM,KACLG,EAAKQ,OAAOC,QAAQ,iBAAiB;;ACVjD,aARA,IAAA,EAAA,QAAA,WACA,EAAA,QAAA,SAEA,SAASC,EAAcC,GACrBA,EAASC,MAAM,CAAEL,cAAepC,EAAAA,QAChCwC,EAASE,IAAI,kBAAkB,GAAO,GAAO,EAAOf,EAApD,KAGFgB,OAAOC,QAAUL","file":"riot-is-password-known.map","sourceRoot":"../src","sourcesContent":["export const Constants = {\n  apiUri: 'https://api.pwnedpasswords.com/range',\n  sliceSize: 5,\n  minPasswordLength: 5\n}\n","import sha1 from 'js-sha1'\nimport { Constants } from './constants'\n\nexport function Mixin(password) {\n  const hashed = sha1(password)\n  const prefix = hashed.toString().slice(0, Constants.sliceSize)\n  const suffix = hashed.slice(Constants.sliceSize).toUpperCase()\n  return new Promise(function(resolve, reject) {\n    fetch(`${Constants.apiUri}/${prefix}`)\n      .then(response => {\n        response.text().then(list => {\n          // eslint-disable-next-line\n          console.log(list.split('\\n'))\n          // eslint-disable-next-line\n          console.log(list.split('\\n').find(p => p.split(':')[0] == suffix))\n          // eslint-disable-next-line\n          console.log(`${hashed} | ${suffix}`)\n          const result = list.split('\\n').find(p => p.split(':')[0] == suffix)\n          // eslint-disable-next-line\n          console.log(result)\n          resolve({\n            matched: result ? true : false,\n            count: result\n              ? parseInt(result.split(':')[1].replace('\\\\r', ''))\n              : 0\n          })\n        })\n      })\n      .catch(() => {\n        reject()\n      })\n  })\n}\n","import { Constants } from './constants'\n\nexport function Tag(opts) {\n  const self = this\n\n  if (\n    self.root instanceof HTMLInputElement &&\n    (opts.type == 'text' || opts.type == 'password')\n  ) {\n    self.root.addEventListener('keyup', function() {\n      const value = self.root.value.replace(/\\s/g, '')\n      if (value.length > Constants.minPasswordLength) {\n        self\n          .passwordKnown(value)\n          .then(matched => {\n            self.parent.trigger('passwordKnown', matched)\n          })\n          .catch(() => {\n            self.parent.trigger('passwordKnown', false)\n          })\n      }\n    })\n  }\n}\n","import { Mixin } from './mixin'\nimport { Tag } from './tag'\n\nfunction PasswordKnown(instance) {\n  instance.mixin({ passwordKnown: Mixin })\n  instance.tag('password-known', false, false, false, Tag)\n}\n\nmodule.exports = PasswordKnown\n"]}